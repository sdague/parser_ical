<?php
// $Id$

/**
 * @file
 * Test case for CCK ical date field mapper mappers/content.inc.
 */

require_once(drupal_get_path('module', 'feeds') . '/tests/feeds_mapper_test.inc');

/**
 * Class for testing Feeds <em>content</em> mapper.
 *
 * @todo: Add test method iCal
 * @todo: Add test method for end date
 */
class FeedsMapperiCalTestCase extends  FeedsMapperTestCase {

  public static function getInfo() {
    return array(
      'name' => t('iCal Parser'),
      'description' => t('Test Feeds iCal parser support and date mapping.'),
      'group' => t('Feeds'),
    );
  }

  public function absolutePath() {
    return $this->absolute() . '/'. drupal_get_path('module', 'parser_ical');
  }
  /**
   * Set up the test.
   */
  public function setUp() {
    // Call parent setup with the required module.
    parent::setUp('feeds', 'feeds_ui', 'ctools', 'content', 'date_api', 'date', 'parser_ical');

    // Create user and login.
    $this->drupalLogin($this->drupalCreateUser(
        array(
          'administer content types',
          'administer feeds',
          'administer nodes',
          'administer site configuration',
        )
    ));
  }

  /**
   * Basic test loading a single entry CSV file.
   */
  public function test() {
    // Create content type.
    $typename = $this->createContentType(NULL, array(
      'eventdate' => array('type' => 'date', 'settings' => array('todate' => 'optional', 'tz_handling' => 'date'), ),
      'eventdate2' => array('type' => 'date', 'settings' => array('todate' => 'optional', 'tz_handling' => 'site'), ),
    ));

    // Create and configure importer.
    $this->createFeedConfiguration('iCal Feed', 'ical');
    $this->setSettings('ical', NULL, array('content_type' => '', 'import_period' => FEEDS_SCHEDULE_NEVER, ));
    $this->setPlugin('ical', 'FeedsFileFetcher');
    $this->setPlugin('ical', 'FeedsIcalDateParser');
    $this->setSettings('ical', 'FeedsNodeProcessor', array('content_type' => $typename));
    $this->addMappings('ical', array(
      array(
        'source' => 'title',
        'target' => 'title',
      ),
      array(
        'source' => 'description',
        'target' => 'body',
      ),
      array(
        'source' => 'ical_date',
        'target' => 'field_eventdate:start',
      ),
      array(
        'source' => 'ical_date',
        'target' => 'field_eventdate2:start',
        ),
    ));

    // Import CSV file.
    $this->importFile('ical', $this->absolutePath() .'/tests/feeds/School.ics');
    $this->assertText('Created 25 '. $typename .' nodes.');
    // Check the imported nodes.
    $values = array(
      '08/31/2009 - 19:30',
      '08/31/2009 - 23:30',
      '09/01/2009 - 19:00',
      '09/01/2009 - 17:00',
      '09/03/2009 - 18:00',
      '09/03/2009 - 22:00',
      );
    $titles = array('Dunster Assembly', 'Advising Meeting with Ed', 'Sophomore Dinner');
    for ($i = 1; $i <= 3; $i++) {
      $this->drupalGet("node/$i/edit");
      $n = node_load($i, NULL, TRUE);
      $this->assertText($titles[$i-1]);
      $this->assertCCKFieldValue('eventdate', $values[$i*2-2]);
      $this->assertCCKFieldValue('eventdate2', $values[$i*2-1]);
    }
  }

protected function getFormFieldsNames($field_name, $index) {
    if (in_array($field_name, array('date', 'datetime', 'datestamp', 'eventdate', 'eventdate2'))) {
      return array("field_{$field_name}[{$index}][value][date]");
    }
    else {
      return parent::getFormFieldsNames($field_name, $index);
    }
  }
}
